{"version":3,"sources":["components/navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","style","display","justifyContent","className","Logo","options","max","height","width","role","ImageLinkForm","onInputChange","onSubmit","type","onChange","onClick","Rank","FaceRecognition","imageUrl","box","id","alt","src","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","area","factor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","console","log","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","params","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76f9bcd9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n            <p className='f3 link din black underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react'\r\nimport Tilt from 'react-tilt'\r\nimport './Logo.css'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max: 55 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner\"><span role='img'> ðŸ‘½</span></div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react'\r\nimport './ImageLinkForm.css'\r\nconst ImageLinkForm = ({ onInputChange, onSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n                {'This magic brain will detect faces in your pictures. Give it a try'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange} />\r\n                    <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' onClick={onSubmit}>Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react'\r\n\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className='white f3'>\r\n                {'Snake, your current rank is...'}\r\n            </div>\r\n            <div className='white f3'>\r\n                {'#7'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './FaceRecognition.css'\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto' />\r\n                <div className='bounding-box' style={{ top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol }}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\nimport Navigation from './components/navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nimport { Particles } from 'react-particles-js';\nimport Clarifai from 'clarifai'\n\nconst app = new Clarifai.App({\n  apiKey: '5bb4b44e3c504178970669f843c821b2'\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        area: 800,\n        factor: 1000\n      }\n    }\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage')\n    const width = Number(image.width)\n    const height = Number(image.height)\n    console.log(data)\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box)\n    this.setState({ box: box });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input })\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err))\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={particlesOptions} />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onSubmit={this.onSubmit} />\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}